/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { BenefitCategoryService } from "../benefitCategory.service";
import { BenefitCategoryCreateInput } from "./BenefitCategoryCreateInput";
import { BenefitCategory } from "./BenefitCategory";
import { BenefitCategoryFindManyArgs } from "./BenefitCategoryFindManyArgs";
import { BenefitCategoryWhereUniqueInput } from "./BenefitCategoryWhereUniqueInput";
import { BenefitCategoryUpdateInput } from "./BenefitCategoryUpdateInput";

export class BenefitCategoryControllerBase {
  constructor(protected readonly service: BenefitCategoryService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: BenefitCategory })
  async createBenefitCategory(
    @common.Body() data: BenefitCategoryCreateInput
  ): Promise<BenefitCategory> {
    return await this.service.createBenefitCategory({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [BenefitCategory] })
  @ApiNestedQuery(BenefitCategoryFindManyArgs)
  async benefitCategories(
    @common.Req() request: Request
  ): Promise<BenefitCategory[]> {
    const args = plainToClass(BenefitCategoryFindManyArgs, request.query);
    return this.service.benefitCategories({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: BenefitCategory })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async benefitCategory(
    @common.Param() params: BenefitCategoryWhereUniqueInput
  ): Promise<BenefitCategory | null> {
    const result = await this.service.benefitCategory({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: BenefitCategory })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateBenefitCategory(
    @common.Param() params: BenefitCategoryWhereUniqueInput,
    @common.Body() data: BenefitCategoryUpdateInput
  ): Promise<BenefitCategory | null> {
    try {
      return await this.service.updateBenefitCategory({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: BenefitCategory })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteBenefitCategory(
    @common.Param() params: BenefitCategoryWhereUniqueInput
  ): Promise<BenefitCategory | null> {
    try {
      return await this.service.deleteBenefitCategory({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
