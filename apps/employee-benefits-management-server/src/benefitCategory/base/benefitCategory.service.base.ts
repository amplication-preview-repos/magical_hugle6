/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  BenefitCategory as PrismaBenefitCategory,
} from "@prisma/client";

export class BenefitCategoryServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.BenefitCategoryCountArgs, "select">
  ): Promise<number> {
    return this.prisma.benefitCategory.count(args);
  }

  async benefitCategories(
    args: Prisma.BenefitCategoryFindManyArgs
  ): Promise<PrismaBenefitCategory[]> {
    return this.prisma.benefitCategory.findMany(args);
  }
  async benefitCategory(
    args: Prisma.BenefitCategoryFindUniqueArgs
  ): Promise<PrismaBenefitCategory | null> {
    return this.prisma.benefitCategory.findUnique(args);
  }
  async createBenefitCategory(
    args: Prisma.BenefitCategoryCreateArgs
  ): Promise<PrismaBenefitCategory> {
    return this.prisma.benefitCategory.create(args);
  }
  async updateBenefitCategory(
    args: Prisma.BenefitCategoryUpdateArgs
  ): Promise<PrismaBenefitCategory> {
    return this.prisma.benefitCategory.update(args);
  }
  async deleteBenefitCategory(
    args: Prisma.BenefitCategoryDeleteArgs
  ): Promise<PrismaBenefitCategory> {
    return this.prisma.benefitCategory.delete(args);
  }
}
